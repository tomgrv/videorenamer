#!/bin/sh
#script_name=$(basename -- "$0")
script_name="postinst"

. /var/packages/VideoRenamer/scripts/common
#. `dirname $0`/common

DO_RESTORE &&

# new crontab.job
if [ -e "$JOB_PATH/$JOB_FILENAME" ];
	then 
		HourToRun="$(cut -f2 "$JOB_PATH/$JOB_FILENAME")"
		echo "0	$HourToRun	*	*	*	root	$MAIN_SCRIPT_FULL_PATH" > "$JOB_PATH/$JOB_FILENAME"
		if [ -e "$VR_VideoStation_Folder/debug" ];
			then
				echo "$(date +"%F %T") : running time saved : $HourToRun" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
		fi
	else
		# check time var
		#if [ -z "$MinuteToRun" ];
		#	then
		#		MinuteToRun="0"
		#fi
		if [ -z "$HourToRun" ];
			then
				HourToRun="1"
		fi
		#if [ -z "$DayOfMonthToRun" ];
		#	then
		#		DayOfMonthToRun="*"
		#fi
		#if [ -z "$MonthToRun" ];
		#	then
		#		MonthToRun="*"
		#fi
		#if [ -z "$DayOfWeekToRun" ];
		#	then
		#		DayOfWeekToRun="*"
		#fi
		echo "0	$HourToRun	*	*	*	root	$MAIN_SCRIPT_FULL_PATH" > "$JOB_PATH/$JOB_FILENAME"
		if [ -e "$VR_VideoStation_Folder/debug" ];
			then
				echo "$(date +"%F %T") : default running time : $HourToRun" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
		fi
fi






# new jobtime.cfg
#if [ ! -e "$JOB_PATH$JOB_TIME" ];
#	then 
#		echo "schedule time to run" > "$JOB_PATH$JOB_TIME"
#		echo "minute: $MinuteToRun" >> "$JOB_PATH$JOB_TIME" # (from 0 to 59)
#		echo "hour: $HourToRun" >> "$JOB_PATH$JOB_TIME" # (from 0 to 23)
#		echo "day of month: $DayOfMonthToRun" >> "$JOB_PATH$JOB_TIME" # (from 1 to 31)
#		echo "month: $MonthToRun" >> "$JOB_PATH$JOB_TIME" # (from 1 to 12)
#		echo "day of week: $DayOfWeekToRun" >> "$JOB_PATH$JOB_TIME" # (from 0 to 6) (0=Sunday)
#fi


#make file executable
sleep 1
#chmod +rx "$APP_PATH/index.cgi"
#chmod +rx "APP_TARGET_PATH/scripts/resume.sh"
#chmod +rx "APP_TARGET_PATH/scripts/var.sh"
#chmod +rx "APP_TARGET_PATH/scripts/changetime.sh"
#chmod +rx "APP_TARGET_PATH/scripts/lastruntime.sh"
find "$APP_TARGET_PATH/scripts/" -type f -exec chmod +rx {} \;
if [ -e "$VR_VideoStation_Folder/debug" ];
	then
		echo "$(date +"%F %T") : security rights set to $APP_TARGET_PATH/scripts/" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
fi
#chmod 0777 "$APP_TARGET_PATH/tmp/"
#chmod 755 "$APP_TARGET_PATH/log/"
find "/var/packages/VideoRenamer/scripts/" -type f -exec chmod +rx {} \;
if [ -e "$VR_VideoStation_Folder/debug" ];
	then
		echo "$(date +"%F %T") : security rights set to /var/packages/VideoRenamer/scripts/" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
fi
chmod +rx "$APP_TARGET_PATH/ui/index.cgi"
if [ -e "$VR_VideoStation_Folder/debug" ];
	then
		echo "$(date +"%F %T") : security rights set to $APP_TARGET_PATH/ui/index.cgi" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
fi

# droit sur le dossier temporaire dans /tmp/
if [ -e "/tmp/VideoRenamer/" ];
	then
		chmod 0777 "/tmp/VideoRenamer/" # drwxrwxrwx 
		if [ -e "$VR_VideoStation_Folder/debug" ];
			then
				echo "$(date +"%F %T") : security rights set to /tmp/VideoRenamer/" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
		fi
fi

# delete /tmp/videorenamer files
#if [ -e "/tmp/$PACKAGE_NAME/" ];
#	then 
#		rm -rf "/tmp/$PACKAGE_NAME/"
#fi

VR_Var="1"
# conf checker
. ${APP_TARGET_PATH}/scripts/confchecker.sh
Ret=$?
if [ "$Ret" -eq "0" ];
	then
		if [ -e "$VR_VideoStation_Folder/debug" ];
			then
				echo "$(date +"%F %T") : confchecker has run" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
		fi
	else
		if [ -e "$VR_VideoStation_Folder/debug" ];
			then
				echo "$(date +"%F %T") : confchecker has FAILED : error code : $Ret" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
		fi
		exit
fi

# check_and_update_db
. ${APP_TARGET_PATH}/scripts/sql/video_metadata.sh
Ret=$?
if [ "$Ret" -eq "0" ];
	then
		if [ -e "$VR_VideoStation_Folder/debug" ];
			then
				echo "$(date +"%F %T") : video_metadata has run" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
		fi
	else
		if [ -e "$VR_VideoStation_Folder/debug" ];
			then
				echo "$(date +"%F %T") : video_metadata has FAILED : error code : $Ret" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
		fi
		exit
fi

# move logs before V18.0515
if [ -e "/$VideoStationVolume/video/VideoRenamed.log" ];
	then
		mv "/$VideoStationVolume/video/VideoRenamed.log" "${VR_APP_LOG_PATH}/VideoRenamed.log" 
fi
# remove files before V18.0504
# remove movie renamed number
if [ -e "${VR_APP_TMP_PATH}/movienbr" ];
	then
		rm -f "${VR_APP_TMP_PATH}/movienbr"
fi
# remove tvshow renamed number
if [ -e "${VR_APP_TMP_PATH}/tvshownbr" ];
	then
		rm -f "${VR_APP_TMP_PATH}/tvshownbr"
fi
# remove corrupted video number
if [ -e "${VR_APP_TMP_PATH}/corruptednbr" ];
	then
		rm -f "${VR_APP_TMP_PATH}/corruptednbr"
fi
# remove rescan
if [ -e "${VR_APP_TMP_PATH}/rescan" ];
	then
		rm -f "${VR_APP_TMP_PATH}/rescan"
fi
# remove old logs before V18.0516
if [ -e "${VR_APP_TMP_PATH}/VideoNotRenamed.log" ];
	then
		rm -f "${VR_APP_TMP_PATH}/VideoNotRenamed.log"
fi
if [ -e "${VR_APP_TMP_PATH}/VideoNotRenamed.tmp.log" ];
	then
		rm -f "${VR_APP_TMP_PATH}/VideoNotRenamed.tmp.log"
fi
if [ -e "${VR_APP_TMP_PATH}/lastruntime.log" ];
	then
		rm -f "${VR_APP_TMP_PATH}/lastruntime.log"
fi
if [ -e "${VR_APP_TMP_PATH}/VideoRenamed.tmp.log" ];
	then
		rm -f "${VR_APP_TMP_PATH}/VideoRenamed.tmp.log"
fi
if [ -e "${VR_APP_LOG_PATH}/VideoNotRenamed.tmp.log" ];
	then
		rm -f "${VR_APP_LOG_PATH}/VideoNotRenamed.tmp.log"
fi
if [ -e "$VR_APP_TMP_PATH/corruptednbr" ];
	then
		rm -f "$VR_APP_TMP_PATH/corruptednbr"
fi
if [ -e "${VR_APP_LOG_PATH}/dar" ];
	then
		rm -f "${VR_APP_LOG_PATH}/dar"
fi
if [ -e "$VR_VideoStation_Folder/debug" ];
	then
		echo "$(date +"%F %T") : old files removed" >> "$VR_VideoStation_Folder/VideoRenamer/log/$script_name.sh.log"
fi
exit 0
